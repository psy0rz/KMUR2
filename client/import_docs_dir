#!/usr/bin/env python3

XXX unfinshed!

import argparse
import json
import rpc
import sys
import time

parser = argparse.ArgumentParser(description='Tracer - document directory importer 1.0')

parser.add_argument('--url', default='http://localhost:8080/rpc', help='url of rpc server to connect to. default: %(default)s')
parser.add_argument('--user', help='user to login. default: %(default)s')
parser.add_argument('--password', help='password. default: %(default)s')
parser.add_argument('--title', required=True, help='Title of the new task to upload the documents to, use {batch} to insert batchname.')
parser.add_argument('--test', default=False, action='store_true', help='do a test run, without actually importing')
parser.add_argument('--ticket_status', default="reference", help='Status of the new task')
parser.add_argument('--regex', help='Batch files together by this regex. To batch by 1st 15 chars for example: "^.{15}"')
parser.add_argument('pattern',   nargs=1, help='Globbing pattern. e.g. *.jpg')

args = parser.parse_args()

# try:
#initialise the rpc client class
rpc_client=rpc.RpcClient(args.url)

#check if files are readable/existing
for filename in args.files:
	with open(filename,'rb') as fh:
		fh.read(1)

#first login using the specified user and pass
user=rpc_client.request("core.Users.login", name=args.user, password=args.password)["data"]
print(user)

#create ticket
ticket=rpc_client.request("ticket.Tickets.put", 
	title=args.title,
	import_id="import_docs",
	ticket_priority="3",
	owner=user["user_id"],
	ticket_status=args.ticket_status,
	start_date=int(time.time()),
	deligated_users=[],
	allowed_groups=[],
	ticket_completed=False,
	relations=[],
	tickets=[],
	due_date=None,
	desc=""
)["data"]

#upload documents
for filename in args.files:
	ticket_object=rpc_client.request("ticket.TicketObjects.put", 
		filename=filename,
		allowed_users=[ user["user_id"] ],
		create_time=int(time.time()),
		tickets=[ ticket["_id"] ]
	)["data"]



sys.exit(0)

# except Exception as e:
# 	print("Error: "+str(e), file=sys.stderr)
# 	sys.exit(1)



