#!/usr/bin/env python3.4
 

try:
    import sys
    import argparse
    import json
    import rpc
    import time
    import os
    import email
    import email.policy
    import re
    import tempfile
    import uuid
    import traceback
    import memcache
    import hashlib

    parser = argparse.ArgumentParser(description='Tracer - mail importer 1.0', epilog="Reads mail from stdin and creates a ticket with docs and email objects when neccesary")

    parser.add_argument('--url', default='http://localhost:8080/rpc', help='url of rpc server to connect to. default: %(default)s')
    parser.add_argument('--user', required=True, help='user to login. default: %(default)s')
    parser.add_argument('--password', help='password. default: %(default)s')
    parser.add_argument('--api_key', default=None, help='api_key, use instead of password to overrule all logins globally')
    parser.add_argument('--insecure', action='store_true', help='dont verify SSL certificates. (use with self-signed certificates)')
    parser.add_argument('--debug', action='store_true', help='debug mode')
    parser.add_argument('--sender',  required=True, help='Envelope sender')
    parser.add_argument('--receip',  required=True, help='Envelope receipient')
    parser.add_argument('--smtp_server', default='localhost', help='SMTP server to use. default: %(default)s')
    parser.add_argument('--no_forward', action='store_true', help='dont forward mail (usefull for testing)')


    args = parser.parse_args()
    
    #debugging output
    def debug(*a, **kw):
        if args.debug:
            print(*a, **kw )
            sys.stdout.flush()


    #decodes email-header to one unicode string
    def header_to_unicode(s):
        return(s) #not needed with new policy

        ret=""
        for decoded in email.header.decode_header(s):
            if ret:
                ret=ret+" "

            if isinstance(decoded[0], bytes):
                if decoded[1]:
                    ret=ret+decoded[0].decode(decoded[1])
                else:
                    ret=ret+decoded[0].decode() #utf8
            else:
                ret=ret+decoded[0]

        return(ret)

    #initialise the rpc client class
    rpc_client=rpc.RpcClient(args.url, insecure=args.insecure)

    #first login using the specified user and pass (or global api_key)
    user=rpc_client.request("core.Users.login", name=args.user, password=args.password, api_key=args.api_key)["data"]

    #get ticket-mailer settings for this user 
    settings=rpc_client.request("ticket.MailSettings.get")["data"]

    #parse mail from stdin:
    # msg = email.message_from_binary_file(sys.stdin.buffer, policy=email.policy.EmailPolicy())
    msg = email.message_from_binary_file(sys.stdin.buffer,policy=email.policy.EmailPolicy())
    debug("Parsed message with message-id:", msg["message-id"])
    debug("Subject:", msg["subject"])

    ### check if this mail already has been seen? 
    if settings['skip_duplicates']:
        message_key="import_mail_id_"+hashlib.sha256(msg["message-id"].encode()).hexdigest()
        mc=memcache.Client(['127.0.0.1:11211'], debug=0)
        if mc.get(message_key):
            debug("DONE: Skipping, already seen this message id")
            sys.exit(0)


    # #determine reciepient and sender
    # if args.mail_address:
    #     #usually used when importing existing mail from disk
    #     sender=header_to_unicode(msg["from"])
    #     receip=header_to_unicode(msg["to"])
    #     if not receip:
    #         receip="" #make sure its str
    # else:
    #     #used when called by as an MDA
    #     sender=os.environ['SENDER']
    #     receip=os.environ['RECIPIENT']

    #make sure all is lowercase 
    args.sender=args.sender.lower()
    args.receip=args.receip.lower()
    settings["email_forward"]=settings["email_forward"].lower()
    debug("Enveloppe from: ",args.sender)
    debug("Enveloppe to: ",args.receip)
    debug("Forward address of user is ", settings["email_forward"])


    #get all receiver email adresses (without name)
    all_receip=set()
    for addr in email.utils.getaddresses(
        msg.get_all('to', [])+
        msg.get_all('cc', [])+
        msg.get_all('resent-to', [])+
        msg.get_all('resent-cc', [])+ 
        [ args.receip ]
    ):
        all_receip.add(addr[1].lower())

    all_receip=list(all_receip)
    debug("All receiver adresses: ",all_receip)


    import_id="import_mail@"+msg["message-id"]


    ### collect all trackables
    trackables=set()
    if msg["message-id"]:
        debug("Trackable in Message-id: ", msg["message-id"])
        trackables.add(msg["message-id"])

    if msg["in-reply-to"]:
        debug("Trackable in In-Reply-To: ", msg["in-reply-to"])
        trackables.add(msg["in-reply-to"])

    if msg["references"]:
        debug("Trackable in references: ", msg["references"].split(" "))
        trackables.update(msg["references"].split(" "))


    # find embedded trackable and embed new ones if neccesary
    embedded_trackables=[]
    embedded_re=re.compile("\[{}(........-....-....-....-............)\]".format(settings['trackable']))

    #first try to find all the embedded trackables
    for msg_part in msg.walk():
        if msg_part.get_content_type()=="text/plain" or msg_part.get_content_type()=="text/html":
            payload=msg_part.get_payload(decode=True)

            if isinstance(payload, bytes):
                if msg_part.get_content_charset():
                    text=payload.decode(msg_part.get_content_charset())
                else:
                    text=payload.decode()
            else:
                text=payload

            #collect all embedded trackabales of this part
            embedded_trackables.extend(re.findall(embedded_re, text))


    #none found at all, create new one?
    if not embedded_trackables:
        existing_embedded=False
        embedded_trackables=[ str(uuid.uuid4()) ]
        debug("Created new embedded trackable:", embedded_trackables[0])
    else:
        existing_embedded=True
        debug("Trackables embedded in body:", embedded_trackables)

    embedded_text="[{}{}]".format(settings['trackable'], embedded_trackables[0])


    #now add the embedded trackable to all text and html parts that are missing it
    for msg_part in msg.walk():
        if msg_part.get_content_type()=="text/plain" or msg_part.get_content_type()=="text/html":
            payload=msg_part.get_payload(decode=True)

            if isinstance(payload, bytes):
                if msg_part.get_content_charset():
                    text=payload.decode(msg_part.get_content_charset())
                else:
                    text=payload.decode()
            else:
                text=payload

            #need to embed it in this part?
            if not re.search(embedded_re,text):
                if msg_part.get_content_type()=="text/plain":
                    text=text+"\n{}\n".format(embedded_text)
                else: #html
                    #does it has a </body> tag?
                    if re.search("</body>", text):
                        #add embedded text nicely before end-body tag
                        text=re.sub("(</body>)", '<p>{}</p>\\1'.format(embedded_text), text, flags=re.IGNORECASE)
                    else:
                        #no body tags, just slap it on at the end (gmail does this)
                        text=text+'<p>{}</p>'.format(embedded_text)

                del msg_part["Content-Transfer-Encoding"]
                msg_part.set_payload(text, msg_part.get_content_charset())

    trackables.update(embedded_trackables)
    debug("Plain trackables:", trackables)


    ### determine and do actual forwarding
    dont_forwards=set()
    for email in settings["email_dont_forward"]:
        dont_forwards.add(email['email'].lower())

    if args.sender in dont_forwards:
        debug("Assuming OUTGOING mail, sender is in dont_forward list")
        incoming=False
    else:
        debug("Assuming INCOMING mail")
        incoming=True
    

        if existing_embedded and settings["email_forward"] in all_receip:
            debug("Not forwarding: Mail already has embedded trackable and was already sent to forward adress.")
        else:
            #add tracer adress to cc and reply to for easier cc-ing to us.
            reply_to=args.receip
            #make sure the original from-adress is included
            if not msg["reply-to"]:
                # msg.set_param(msg["from"], None, header='Reply-To')
                msg["Reply-To"]=msg["from"]+", "+reply_to
            else:
                if reply_to.lower() not in msg["Reply-To"].lower():
                    existing_reply_to=msg["Reply-To"]
                    del msg["Reply-To"]
                    msg["Reply-To"]=existing_reply_to+", "+reply_to

            #also put the adress in the cc field, because some broken mailers dont support multiple reply-to adresses (zarafa webapp/webaccess for example)
            if msg["cc"]:
                if reply_to.lower() not in msg["cc"].lower():
                    existing_cc=msg["cc"]
                    del msg["cc"]
                    msg["cc"]=existing_cc+", "+reply_to
            else:
                msg["cc"]=reply_to


        if args.no_forward:
           debug("NOT forwarding to {} via smtp server {}".format(settings["email_forward"], args.smtp_server))
        else:
            import smtplib
            debug("Forwarding to {} via smtp server {}".format(settings["email_forward"], args.smtp_server))
            smtp_server = smtplib.SMTP(args.smtp_server)
            # smtp_server.set_debuglevel(1)
            smtp_server.send_message(msg, from_addr=args.sender, to_addrs=settings["email_forward"])
            smtp_server.quit()



#we never want to lose mail, so everthing up to the forwarding-code generates a temporary error:
except Exception as e:
    print("Temporary error: "+str(e))
    if 'args' in locals() and args.debug:
        traceback.print_exc(file=sys.stdout)
    sys.exit(75) 


#now that we forwarded the mail, we have to ignore further errors (otherwise the mailer would retry or bounce)
try:

    #store message-id in duplicate-skipper table
    if settings['skip_duplicates']:
        mc.set(message_key,True)

    #which timestamp to give to new objects?
    if settings['mail_date']:
        timestamp=email.utils.parsedate_to_datetime(msg["date"]).timestamp()
    else:
        timestamp=int(time.time())

    ### try to find relations
    related_addresses=set()
    if incoming:
        related_addresses.add(args.sender)
    else:
        related_addresses.update(all_receip)

    relation_ids=[]
    if related_addresses:
        relations=rpc_client.request("ticket.Relations.get_all",
            fields=[ "_id", "allowed_users", "allowed_groups", "email_trackable_subject_regex", "email_trackable_body_regex"],
            spec_and=[ { 
                "emails.email": {
                    "$in": list(related_addresses)  
                } 
            } ]
        )["data"]

        relation_ids=set()
        for relation in relations:
            relation_ids.add(relation["_id"])
        relation_ids=list(relation_ids)

        debug("Relations with matching email adresses:", relation_ids)

        #try to extract customer specific trackables from the mail
        for relation in relations:
            if "email_trackable_subject_regex" in relation:
                try:
                    #catch invalid regexes
                    subject_trackables=re.findall(relation["email_trackable_subject_regex"], header_to_unicode(msg["subject"]))
                except:
                    debug("Invalid regex '{}' for customer {}".format(relation["email_trackable_subject_regex"], relation["_id"]))
                    subject_trackables=[]
                    pass
                debug("Specific trackable regex '{}' for customer {} found: {}".format(relation["email_trackable_subject_regex"], relation["_id"], subject_trackables))
                trackables.update(subject_trackables)


    ### try to find any mails with these trackables
    trackables=list(trackables) # json encodable
    debug("All trackables:", trackables)
    ticket_objects=rpc_client.request("ticket.TicketObjects.get_all",
            fields=[ "tickets" ],
            match_in={ "trackables": trackables  } 
    )["data"]
    debug("TicketObjects with matching trackables:", ticket_objects)

    #also try to find latest related mail object
    prev_related_mail_objects=rpc_client.request("ticket.TicketObjects.get_all",
            fields=[ "type" ],
            match_in={ "trackables": trackables  },
            match={ "type": "email" },
            sort=[ ( "create_time", -1 ) ],
            limit=1,
    )["data"]


    ### determine the existing accesible ticket_ids:
    all_ticket_ids=set()
    for ticket_object in ticket_objects:
        all_ticket_ids.update(ticket_object["tickets"])
    all_ticket_ids=list(all_ticket_ids) #json encodable

    if relation_ids:
        #only link to existing tickets that we have access to and that is related to one of the relations
        tickets=rpc_client.request("ticket.Tickets.get_all",
                fields=[ "_id", "ticket_status", "ticket_completed", "relations" ],
                match_in={ 
                    "_id": all_ticket_ids,
                    "relations": relation_ids
                }
        )["data"]
    else:
        #no relation found, so just try to link it to any ticket
        tickets=rpc_client.request("ticket.Tickets.get_all",
                fields=[ "_id", "ticket_status", "ticket_completed", "relations" ],
                match_in={ 
                    "_id": all_ticket_ids,
                }
        )["data"]


    ticket_ids=set()
    for ticket in tickets:
        ticket_ids.add(ticket["_id"])
    ticket_ids=list(ticket_ids) #json encodable


    ### create new ticket?
    if not tickets:
        if existing_embedded:
            debug("Creating new ticket because existing embedded trackable was found")
        elif ( incoming and not settings['always_create'] and not relation_ids ):
            debug("DONE: Ignoring incoming message, mail-addresses cant be found in any relation, and no existing tickets or existing embedded trackables found.")
            sys.exit(0)

        ticket={
            'change_reason':"Automaticly created by email importer",
            'title':header_to_unicode(msg["subject"]),
            'import_id':import_id,
            'ticket_priority':"3",
            'owner':user["user_id"],
            'ticket_status':settings['ticket_status'],
            'start_date':timestamp,
            'deligated_users':set(),
            'allowed_groups':set(),
            'ticket_completed':False,
            'relations':relation_ids,
            'ticket_read': False,
            'tickets':[],
            'due_date':None,
            'desc':"Created by mail from {} to {}".format(args.sender, args.receip),
        }

        if settings['due_days']:
            ticket['due_date']=timestamp+int(settings['due_days'])*(24*3600)

        #copy permission from found relation(s)
        if settings['copy_relation_permissions']:
            for relation in relations:
                ticket['deligated_users'].update(relation['allowed_users'])
                ticket['allowed_groups'].update(relation['allowed_groups'])

        ticket['deligated_users']=list(ticket['deligated_users'])
        ticket['allowed_groups']=list(ticket['allowed_groups'])

        ticket=rpc_client.request("ticket.Tickets.put", **ticket)["data"]

        ticket_ids=[ ticket["_id"] ]
        debug("Created new ticket:", ticket["_id"])
    else:
        debug("Linking to existing tickets:", ticket_ids)

        #update the tickets
        for ticket in tickets:
            doc={}
            doc["_id"]=ticket["_id"]
            doc["change_reason"]="Automaticly changed by email importer"

            doc["ticket_read"]=False

            if settings['reset_due_days']:
                due_date=None
                if settings['due_days']:
                    due_date=timestamp+int(settings['due_days'])*(24*3600)
                doc['due_date']=due_date


            if settings['reset_completed'] and ticket["ticket_completed"]:
                debug("Resetting ticket completed")
                doc['ticket_completed']=False

            if settings['reset_status'] and ticket["ticket_status"]!=settings['ticket_status']:
                debug("Resetting ticket status to: ", settings['ticket_status'])
                doc['ticket_status']=settings['ticket_status']

            if settings['update_relations']:
                #add new relations, if any
                doc["relations"]=set(ticket["relations"])
                doc["relations"].update(relation_ids)
                doc["relations"]=list(doc["relations"])
                if len(doc["relations"])==len(ticket["relations"]):
                    del doc["relations"]
                else:
                    debug("Update ticket relations")

            #did anything change at all?
            #NOTE: always, due to ticket_read
            if len(doc)>2:
                rpc_client.request("ticket.Tickets.put", **doc)
        


    prev_attachment_object=None
    main_mail_object=None
    main_mail_related_ticket_objects=[]

    #update main mail with link to latest related mail
    if prev_related_mail_objects:
        main_mail_related_ticket_objects.append({
            "kind": "Previous mail",
            "ticket_object": prev_related_mail_objects[0]["_id"]
        })

    if incoming:
        direction="incoming"
    else:
        direction="outgoing"

    ### create ticket objects from mail contents
    for msg_part in msg.walk():

        if msg_part.get_content_maintype() == 'multipart':
            continue

        payload=msg_part.get_payload(decode=True)

        filename = msg_part.get_filename()
        if filename:
            #skip inline files, mostly logos
            if msg_part.get_params(header='content-disposition') and msg_part.get_params(header='content-disposition')[0][0]=='inline': # and len(payload)<10000:
                debug("Ignoring inline file {}".format(filename))
                continue

            with tempfile.TemporaryFile() as tmp_file:
                debug("Creating document ticket object for", filename)
                tmp_file.write(payload)
                tmp_file.seek(0)

                related_ticket_objects=[
                    { 
                        "kind": "Mail",
                        "ticket_object": main_mail_object["_id"]
                    }
                ]

                if prev_attachment_object:
                    related_ticket_objects.append({
                        "kind": "Prevous attachment",
                        "ticket_object": prev_attachment_object["_id"]
                    })

                ticket_object=rpc_client.request("ticket.TicketObjects.put", 
                    import_id=import_id,
                    filename=filename,
                    file=tmp_file,
                    allowed_users=[ user["user_id"] ],
                    create_time=timestamp, 
                    tickets=ticket_ids,
                    direction=direction,
                    trackables=trackables,
                    ticket_objects=related_ticket_objects,
                    type="doc"
                )["data"]


                #update previous attacment with next-link
                if prev_attachment_object:
                    prev_attachment_object["ticket_objects"].append({
                        "kind": "Next attachment",
                        "ticket_object": ticket_object["_id"]
                    })
                    rpc_client.request("ticket.TicketObjects.put", **prev_attachment_object)

                prev_attachment_object=ticket_object

                #main mail gets a list of all attachments
                main_mail_related_ticket_objects.append({
                    "kind": "Attachment",
                    "ticket_object": ticket_object["_id"]
                })


        else:
            if msg_part.get_content_type()=="text/plain":
                debug("Creating email ticket object")

                #do we need to decode the charset to unicode?
                if isinstance(payload, bytes):
                    if msg_part.get_content_charset():
                        text=payload.decode(msg_part.get_content_charset())
                    else:
                        text=payload.decode()
                else:
                    text=payload

                ticket_object=rpc_client.request("ticket.TicketObjects.put", **{
                    "import_id":import_id,
                    "allowed_users":[ user["user_id"] ],
                    "create_time":timestamp, 
                    "tickets":ticket_ids,
                    "trackables":trackables,
                    "type":"email",
                    "direction":direction,
                    "from":args.sender,
                    "to":args.receip,
                    "title":header_to_unicode(msg["subject"]),
                    "text":text
                })["data"]

                if not main_mail_object:
                    main_mail_object=ticket_object

            else: 
                debug("Ignoring part with content-type:", msg_part.get_content_type())
    

    #update main mail with all attachment links
    if main_mail_related_ticket_objects:
        main_mail_object["ticket_objects"]=main_mail_related_ticket_objects
        rpc_client.request("ticket.TicketObjects.put", **main_mail_object)


    debug("DONE: Import completed")

except Exception as e:
    debug("Exception: "+str(e))
    debug("Exitting with code 0 since mail was succesfully forwarded (if neccesary)")
    if args.debug:
        traceback.print_exc(file=sys.stdout)
 
    sys.exit(0)
